// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grid_server.proto

#ifndef PROTOBUF_grid_5fserver_2eproto__INCLUDED
#define PROTOBUF_grid_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_grid_5fserver_2eproto();
void protobuf_AssignDesc_grid_5fserver_2eproto();
void protobuf_ShutdownFile_grid_5fserver_2eproto();

class Peer;
class TopologyAssigment;

// ===================================================================

class Peer : public ::google::protobuf::Message {
 public:
  Peer();
  virtual ~Peer();
  
  Peer(const Peer& from);
  
  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();
  
  void Swap(Peer* other);
  
  // implements Message ----------------------------------------------
  
  Peer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Peer)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_grid_5fserver_2eproto();
  friend void protobuf_AssignDesc_grid_5fserver_2eproto();
  friend void protobuf_ShutdownFile_grid_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static Peer* default_instance_;
};
// -------------------------------------------------------------------

class TopologyAssigment : public ::google::protobuf::Message {
 public:
  TopologyAssigment();
  virtual ~TopologyAssigment();
  
  TopologyAssigment(const TopologyAssigment& from);
  
  inline TopologyAssigment& operator=(const TopologyAssigment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopologyAssigment& default_instance();
  
  void Swap(TopologyAssigment* other);
  
  // implements Message ----------------------------------------------
  
  TopologyAssigment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopologyAssigment& from);
  void MergeFrom(const TopologyAssigment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Peer peers = 1;
  inline int peers_size() const;
  inline void clear_peers();
  static const int kPeersFieldNumber = 1;
  inline const ::Peer& peers(int index) const;
  inline ::Peer* mutable_peers(int index);
  inline ::Peer* add_peers();
  inline const ::google::protobuf::RepeatedPtrField< ::Peer >&
      peers() const;
  inline ::google::protobuf::RepeatedPtrField< ::Peer >*
      mutable_peers();
  
  // required int32 your_number = 2;
  inline bool has_your_number() const;
  inline void clear_your_number();
  static const int kYourNumberFieldNumber = 2;
  inline ::google::protobuf::int32 your_number() const;
  inline void set_your_number(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TopologyAssigment)
 private:
  inline void set_has_your_number();
  inline void clear_has_your_number();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Peer > peers_;
  ::google::protobuf::int32 your_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_grid_5fserver_2eproto();
  friend void protobuf_AssignDesc_grid_5fserver_2eproto();
  friend void protobuf_ShutdownFile_grid_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static TopologyAssigment* default_instance_;
};
// ===================================================================


// ===================================================================

// Peer

// required string host = 1;
inline bool Peer::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Peer::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Peer::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Peer::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& Peer::host() const {
  return *host_;
}
inline void Peer::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Peer::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Peer::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Peer::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* Peer::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 port = 2;
inline bool Peer::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Peer::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Peer::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Peer::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Peer::port() const {
  return port_;
}
inline void Peer::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// TopologyAssigment

// repeated .Peer peers = 1;
inline int TopologyAssigment::peers_size() const {
  return peers_.size();
}
inline void TopologyAssigment::clear_peers() {
  peers_.Clear();
}
inline const ::Peer& TopologyAssigment::peers(int index) const {
  return peers_.Get(index);
}
inline ::Peer* TopologyAssigment::mutable_peers(int index) {
  return peers_.Mutable(index);
}
inline ::Peer* TopologyAssigment::add_peers() {
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Peer >&
TopologyAssigment::peers() const {
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::Peer >*
TopologyAssigment::mutable_peers() {
  return &peers_;
}

// required int32 your_number = 2;
inline bool TopologyAssigment::has_your_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopologyAssigment::set_has_your_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopologyAssigment::clear_has_your_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopologyAssigment::clear_your_number() {
  your_number_ = 0;
  clear_has_your_number();
}
inline ::google::protobuf::int32 TopologyAssigment::your_number() const {
  return your_number_;
}
inline void TopologyAssigment::set_your_number(::google::protobuf::int32 value) {
  set_has_your_number();
  your_number_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_grid_5fserver_2eproto__INCLUDED
